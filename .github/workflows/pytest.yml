name: üß™ Pytest

on:
  push:
  pull_request:
    types: [ opened, reopened ]
  workflow_call:
    inputs:
      config-path:
        required: true
        type: string
    secrets:
      token:
        required: true
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.8"]
        os: [ ubuntu-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3
      - name: üêçSetup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: üî® Setup poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.4.0"
      - name: üî®Install dependencies
        run: poetry install --no-interaction --with dev --no-ansi
      - run: mkdir junit && touch junit/test-results-${{ matrix.python-version }}-${{matrix.os}}-summary.md
      - name: üß™ Run tests
        uses: dariocurr/pytest-summary@main
        with:
          extensions: pytest-cov
          options: --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}-${{matrix.os}}.xml --cov-report term --cov-report xml:coverage-${{ matrix.python-version }}-${{matrix.os}}.xml --cov=niceml
          paths: tests/**
          output: junit/test-results-${{ matrix.python-version }}-${{matrix.os}}-summary.md
          show: all
     #   run: |
      #    poetry run pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}-${{matrix.os}}.xml --cov-report term --cov-report xml:coverage-${{ matrix.python-version }}-${{matrix.os}}-unit.xml --cov=niceml tests/unit
     # - name: üß™ Run tests [configs]
      #  run: |
       #   poetry run pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}-${{matrix.os}}.xml --cov-report term --cov-report xml:coverage-${{ matrix.python-version }}-${{matrix.os}}-configs.xml --cov=niceml tests/configs
     # - name: üß™ Run tests [e2e]
      #  run: |
       #   poetry run pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}-${{matrix.os}}.xml --cov-report term --cov-report xml:coverage-${{ matrix.python-version }}-${{matrix.os}}-e2e.xml --cov=niceml  tests/e2e
      - name: ‚¨ÜÔ∏è Upload pytest test results
        uses: actions/upload-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: pytest-results-${{ matrix.python-version }}-${{matrix.os}}
          path: junit/test-results-${{ matrix.python-version }}-${{matrix.os}}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: ‚¨ÜÔ∏è Upload pytest coverage
        uses: actions/upload-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: pytest-coverage-${{ matrix.python-version }}-${{matrix.os}}
          path: coverage-${{ matrix.python-version }}-${{matrix.os}}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: üñäÔ∏è Write job summary
        run: |
          echo "# üß™Test summary for $${{ matrix.python-version }}-${{matrix.os}}" >> $GITHUB_STEP_SUMMARY
          cat junit/test-results-${{ matrix.python-version }}-${{matrix.os}}-summary.md > $GITHUB_STEP_SUMMARY
      - name: ‚¨ÜÔ∏è Upload pytest test summary
        uses: actions/upload-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: pytest-test-summary-${{ matrix.python-version }}-${{matrix.os}}
          path: junit/test-results-${{ matrix.python-version }}-${{matrix.os}}-summary.md
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
