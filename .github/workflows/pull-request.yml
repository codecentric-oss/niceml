name: Python package

on: [push]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8","3.9","3.10"]
        poetry-version: ["1.4"]
        os: [ubuntu-18.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3
      - name: üêçSetup Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev --no-ansi
      - name: Install project
        run: poetry install --no-interaction --no-ansi
      - name: üß™ Run tests
        run: |
          poetry run pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}-${{ matrix.poetry-version}}-${{matrix.os}}.xml tests
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.poetry-version}}-${{matrix.os}}
          path: junit/test-results-${{ matrix.python-version }}-${{ matrix.poetry-version}}-${{matrix.os}}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}